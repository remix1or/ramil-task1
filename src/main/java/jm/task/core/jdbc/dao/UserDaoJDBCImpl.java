package jm.task.core.jdbc.dao;

import jm.task.core.jdbc.model.User;
import jm.task.core.jdbc.util.Util;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class UserDaoJDBCImpl implements UserDao {

    private static final Connection CONNECTION = Util.getConnection();

    public UserDaoJDBCImpl() {

    }

    public void createUsersTable() {
        try {
            Statement statement = CONNECTION.createStatement();
            statement.executeUpdate("CREATE TABLE IF NOT EXISTS Task1( " +
                    "id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, " +
                    "name VARCHAR NOT NULL, " +
                    "lastName VARCHAR NOT NULL, " +
                    "age INTEGER NOT NULL)");

            System.out.println("Таблица создана!");


        } catch (SQLException e) {
            throw new RuntimeException("Ошибка при создании таблицы" + e);
        }

    }

    public void dropUsersTable() {
        try {
            Statement statement = CONNECTION.createStatement();

            statement.executeUpdate("DROP TABLE IF EXISTS Task1");
            System.out.println("Таблица удалена!");

        } catch (SQLException e) {
            throw new RuntimeException("Ошибка при удалении таблицы" + e);
        }
    }

    public void saveUser(String name, String lastName, byte age) {
        try {
            PreparedStatement preparedStatement =
                    CONNECTION.prepareStatement("INSERT INTO Task1(name, lastname, age) VALUES (?,?,?)");

            preparedStatement.setString(1, name);
            preparedStatement.setString(2, lastName);
            preparedStatement.setByte(3, age);
            preparedStatement.executeUpdate();

        } catch (SQLException e) {
            throw new RuntimeException("Ошибка при сохранении юзера" + e);
        }
    }

    public void removeUserById(long id) {
        try {
            PreparedStatement preparedStatement = CONNECTION.prepareStatement("DELETE FROM Task1 WHERE id = ?");

            preparedStatement.setLong(1, id);
            preparedStatement.executeUpdate();
            System.out.println("Юзер по id успешно удален!");

        } catch (SQLException e) {
            throw new RuntimeException("Ошибка при удалении юзера" + e);
        }
    }

    public List<User> getAllUsers() {
        List<User> userList = new ArrayList<>();
        try {
            Statement statement = CONNECTION.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT * FROM Task1");
            while (resultSet.next()){
                User user = new User();
                user.setId(resultSet.getLong("id"));
                user.setName(resultSet.getString("name"));
                user.setLastName(resultSet.getString("lastname"));
                user.setAge(resultSet.getByte("age"));
                userList.add(user);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return userList;
    }

    public void cleanUsersTable() {
        try {
            Statement statement = CONNECTION.createStatement();
            statement.executeUpdate("TRUNCATE TABLE Task1");
            System.out.println("Все пользователи удалены!");
        } catch (SQLException e) {
            throw new RuntimeException("Ошибка при удалении пользовтелей" + e);
        }

    }
}
